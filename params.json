{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# ColtJS Module Framework\r\n\r\n---\r\n\r\nColtJS is a simple framework allowing for easy deployment of JavaScript Application using asynchronous module definition. It's only dependency is [RequireJS](http://www.requirejs.org) \r\nand it builds off simple principles of a centralized router loading modules only when requested to produce an efficient, easy-to-manage application structure.\r\n\r\nThe framework includes methods for handling [routing & navigation](https://github.com/Fluidbyte/ColtJS#uris-hashes-and-query-string-data), [templates](https://github.com/Fluidbyte/ColtJS#templates), \r\n[url parsing](https://github.com/Fluidbyte/ColtJS#passing-data), [event binding](https://github.com/Fluidbyte/ColtJS#events), [utilities & dependencies](https://github.com/Fluidbyte/ColtJS#dependencies--utils), \r\n[persistent storage](https://github.com/Fluidbyte/ColtJS#persistent-storage) and [pub/sub](https://github.com/Fluidbyte/ColtJS#pubsub) as well as other built in functions.\r\n\r\nThe current version supports all modern browsers (including IE8 and above) but can easily be adapted to work with older browsers if needed. _Note: \r\nwe are working on an IE7 support shim which we hope to release shortly._\r\n\r\n---\r\n\r\n## Usage\r\n\r\nThe framework is designed to be simple to implement, utilizing the modules to define how the application functions. The modules tell the system when they should be loaded into \r\nDOM via routes, what events to bind to, and any other scripts/utils to load as dependencies. \r\n\r\nModules should be named the same as their object, and likewise if a template is going to be used the name of that file (in the `/templates` directory) should also match the module \r\nname. You can also specify the template by specifying the `template` property and providing code directly in the module.\r\n\r\nAn example of the structure for a simple module is below:\r\n\r\n```\r\n// Wrap the module in define() + anon function for RequireJS\r\ndefine(function(){    \r\n    \r\n    var module_name = {\r\n         \r\n        // Specify path to dependencies using RequireJS convention, base path\r\n        dependencies: {\r\n            'some_utility': 'utils/some_utility'\r\n        },\r\n        \r\n        // Bind events\r\n        events: {\r\n            'click .something': 'doSomething'\r\n        },\r\n    \r\n        // Sets the routes in which this module should load\r\n        routes: {\r\n            '' : 'renderModuleName',\r\n            'route_to_module': 'renderModuleName'\r\n        },\r\n    \r\n        // Handles rendering of the module\r\n        renderModuleName: function(){\r\n            \r\n            // Setup data for template\r\n            var data = {\r\n                title: \"Module Name\",\r\n                content: \"Lorem Ipsum Dolor Sit Amet...\",\r\n            };\r\n            \r\n            // Render template\r\n            Colt.render(this,data);\r\n        },\r\n        \r\n        // Example of a method of the module object\r\n        doSomething: function(){\r\n            // Console logs the current module scope\r\n            console.log(this);\r\n        }\r\n        \r\n    };\r\n    \r\n    // Return the module object\r\n    return module_name;\r\n    \r\n});\r\n```\r\n\r\nModules should be given elements on the `index.html` (or default page) with the id set to the `module_name`.\r\n\r\nLoading up the framework using RequireJS can be done by simply including the RequireJS source in the `index.html` file:\r\n\r\n```\r\n<script src=\"js/libs/require.js\" data-main=\"js/main\">\r\n```\r\n\r\nThen setting up `main.js` similar to the following, specifying the path to `Colt` and any other libraries utilized, then defining \r\nthe modules as an array and finally calling `Colt.init()`:\r\n\r\n```\r\nrequire.config({\r\n    baseUrl: \"js/\",\r\n    paths: {\r\n        colt:       'libs/colt'\r\n        ...additional libraries...\r\n    }\r\n});\r\n\r\ndefine(['colt'], function (Colt) {\r\n    \r\n    // Define all of the modules\r\n    Colt.modules = [\r\n        'modules/module_name',\r\n        ...additional modules...\r\n    ];\r\n    \r\n    // Initialize application \r\n    Colt.init(); \r\n\r\n});\r\n```\r\n\r\n---\r\n\r\n## Dependencies / Utils\r\n\r\nDependencies or utilities passed into the modules are coded similar to the modules themselves. When the modules route is matched and its template is\r\nloaded and rendered any dependencies are as well. If, for example, you wanted to create a simple object with messages to be utilized for output you could do the \r\nfollowing:\r\n\r\n```\r\ndefine(function(){\r\n\r\n    // Define the util as an object\r\n    var messages = {\r\n            \r\n        'message_one': 'This is message one.',\r\n        'message_two': 'This is message two.',\r\n        'message_three': 'This is message three.'\r\n        \r\n    };\r\n    \r\n    // Return the object\r\n    return messages;\r\n\r\n});\r\n```\r\n\r\nThe above will attach the `messages` object to the scope of the module for access. In the above instance the reference would be `this.messages` inside any methods of \r\nthe module.\r\n\r\n---\r\n\r\n## URI's, Hashes And Query String Data\r\n\r\nThe framework adheres to Google's recommended `#!` convention. Using Colt's `navigate` method or specifying routes only the name needs to be specified, for example:\r\n\r\n```\r\nroutes: {\r\n    'route_to_module': 'renderModule'\r\n}\r\n```\r\n\r\nWill load to `http://www.website.com/#!/route_to_module`\r\n\r\nLikewise, using the `navigate` function:\r\n\r\n```\r\nColt.navigate('route_to_module');\r\n```\r\n\r\nWill point the route to the URL above.\r\n\r\nStatic (or globally utilized) modules can use the `*` character to denote usage throughout the application.\r\n\r\n### Passing Data\r\n\r\nThe router will split out any query string data and pass an object to the matched route(s). For example:\r\n\r\n```\r\nhttp://www.website.com/#!/route_to_module?one=apple&two=orange\r\n```\r\n\r\nWill pass the following object back to the routes function:\r\n\r\n```\r\n{ one: \"apple\", two: \"orange\" }\r\n```\r\n\r\nSo, if the route calls `renderModule` you can access this data using the following:\r\n\r\n```\r\nrenderModule: function(url_data){\r\n    // url_data contains the query string as an object...\r\n}\r\n```\r\n\r\n---\r\n\r\n## Events\r\n\r\nEvents listeners are created using a simple structur similar to other frameworks:\r\n\r\n```\r\nevents: {\r\n    '{event} {object}': '{fn}'\r\n}\r\n```\r\n\r\nSo, for a click event you could specify `'click .something': 'doSomething'` which would fire the `doSomething` method and would return \r\nthe event.\r\n\r\n---\r\n\r\n## Templates\r\n\r\nTemplates should be placed in the `/templates` directory and given the same file name as the module and use the `.tpl` extension.\r\n\r\nColtJS includes basic data replacement using Mustache-style tags, for example:\r\n\r\n```\r\n<h1>{{title}}</h1>\r\n<p>{{content}}</p>\r\n```\r\n\r\nIf another templating engine is required, simply pass it into the `main.js` file, then replace the render function. For example, using [MustacheJS](https://github.com/janl/mustache.js):\r\n\r\n```\r\nrequire.config({\r\n    baseUrl: \"js/\",\r\n    paths: {\r\n        colt:       'libs/colt',\r\n        mustache:   'libs/mustache'\r\n    }\r\n});\r\n\r\ndefine(['colt','mustache'], function (Colt,Mustache) {\r\n    \r\n    // Define all of the modules\r\n    Colt.modules = [\r\n        'modules/module_name',\r\n        ...additional modules...\r\n    ];\r\n    \r\n    // Define custom render to use Mustache\r\n    Colt.render = function (scope,data) {\r\n        var template = scope.template,\r\n            rendered = Mustache.render(template,data);\r\n        \r\n        // Render to DOM\r\n        document.getElementById(scope.mid).innerHTML = rendered;\r\n        \r\n        // Build Event Listeners\r\n        this.delegateEvents(scope.events, scope);\r\n    };\r\n    \r\n    // Initialize application \r\n    Colt.init(); \r\n\r\n});\r\n```\r\n\r\n---\r\n\r\n## Persistent Storage\r\n\r\nColt includes support for persistent storage using `localStorage`, with a fallback to cookies for older browsers. The methods to utilize this are as follows: \r\n\r\n**Create Storage Instance:**\r\n\r\n```\r\nColt.store('some_key','some_value');\r\n```\r\n\r\n**Retrieve Storage Instance:**\r\n\r\n```\r\nColt.store('some_key');\r\n```\r\n\r\n**Remove Storage Instance:**\r\n\r\n```\r\nColt.store('some_key',null);\r\n```\r\n\r\n---\r\n\r\n## Pub/Sub\r\n\r\nColt includes publish + subscribe functions to allow decoupling of events and facilitate interation between modules. The methods for pub/sub implementation are as follows:\r\n\r\n**Subscribe:**\r\n\r\n```\r\nvar token = Colt.subscribe('topic', function(args){\r\n    ...function actions...\r\n});\r\n```\r\n\r\n**Publish:**\r\n\r\n```\r\nColt.publish('topic',args);\r\n```\r\n\r\n**Unsubscribe:**\r\n\r\n```\r\nColt.unsubscribe(token);\r\n```\r\n","tagline":"Simple, efficient, modular JavaScript framework","name":"Coltjs","google":"UA-38146932-1"}